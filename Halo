#include <windows.h>
#include <stdlib.h>
#include <math.h>
#include <GL/freeglut.h>

void init(void);
void tampil(void);
void keyboard(unsigned char, int, int);
void mouse(int button, int state, int x, int y);
void ukuran(int, int);
void mouseMotion(int x, int y);

int is_depth;
float xrot = 0.0f;
float yrot = 0.0f;
float zrot = 0.0f;
float xmov = 0.0f;
float ymov = 0.0f;
float zmov = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;
//deklarasi pembuatan lingkaran
const double PI = 3.142857143;
int i, radius, jumlah_titik, x_tengah, y_tengah, n;
float angle = 0;
//deklarasi gerakan otomatis
int gerak = 0;
bool atas = true;

//db : depan-belakang
//kk : kiri-kanan
//ab : atas-bawah

void db(float xkiri, float xkanan, float ybawah, float yatas, float z) {
    glBegin(GL_QUADS);
    glVertex3f(xkiri, ybawah, z);
    glVertex3f(xkiri, yatas, z);
    glVertex3f(xkanan, yatas, z);
    glVertex3f(xkanan, ybawah, z);
    glEnd();
}

void db2(float xkiri, float xkiri2, float xkanan, float xkanan2, float ybawah, float yatas, float z) {
    glBegin(GL_QUADS);
    glVertex3f(xkiri, ybawah, z);
    glVertex3f(xkiri2, yatas, z);
    glVertex3f(xkanan2, yatas, z);
    glVertex3f(xkanan, ybawah, z);
    glEnd();
}

void bingkai(float xkiri, float xkanan, float ybawah, float yatas, float z) {
    glBegin(GL_LINE_LOOP);
    glVertex3f(xkiri, ybawah, z);
    glVertex3f(xkiri, yatas, z);
    glVertex3f(xkanan, yatas, z);
    glVertex3f(xkanan, ybawah, z);
    glEnd();
}

void kk(float xsisi, float ybawah, float yatas, float zdepan, float zbelakang) {
    glBegin(GL_QUADS);
    glVertex3f(xsisi, ybawah, zdepan);
    glVertex3f(xsisi, yatas, zdepan);
    glVertex3f(xsisi, yatas, zbelakang);
    glVertex3f(xsisi, ybawah, zbelakang);
    glEnd();
}

void kk2(float xsisi1, float xsisi2, float ybawah, float yatas, float zdepan, float zbelakang) {
    glBegin(GL_QUADS);
    glVertex3f(xsisi1, ybawah, zdepan);
    glVertex3f(xsisi2, yatas, zdepan);
    glVertex3f(xsisi2, yatas, zbelakang);
    glVertex3f(xsisi1, ybawah, zbelakang);
    glEnd();
}

void ab(float xkiri, float xkanan, float y, float zdepan, float zbelakang) {
    glBegin(GL_QUADS);
    glVertex3f(xkiri, y, zdepan);
    glVertex3f(xkanan, y, zdepan);
    glVertex3f(xkanan, y, zbelakang);
    glVertex3f(xkiri, y, zbelakang);
    glEnd();
}

void lingkaran(int radius, int n_titik, int x_tgh, int y_tgh, float z)
{
    glBegin(GL_POLYGON);
    for (i = 0; i <= 360; i++) {
        float angle = i * (2 * PI / n_titik);
        float x = x_tgh + radius * cos(angle);
        float y = y_tgh + radius * sin(angle);
        glVertex3f(x, y, z);
        glColor3f(0.8, 0.4, 0.4);
    }
    glEnd();
}

void s3(float xkiri, float xtengah, float xkanan, float ybawah, float yatas, float z)
{
    glBegin(GL_TRIANGLES);
    glVertex3f(xkiri, ybawah, z);
    glVertex3f(xtengah, yatas, z);
    glVertex3f(xkanan, ybawah, z);
    glEnd();
}

//jarum jam
void jarumjam()
{
    glBegin(GL_POLYGON);
    glColor3f(0.54, 0, 0);
    glVertex3f(0, -14, -137.3);
    glVertex3f(0.5, -20, -137.3);
    glVertex3f(-0.5, -20, -137.3);
    glEnd();
}

//jarum menit
void jarummenit()
{
    glBegin(GL_POLYGON);
    glColor3f(0.28, 0.24, 0.55);
    glVertex3f(0, -12, -137.4);
    glVertex3f(0.5, -20, -137.4);
    glVertex3f(-0.5, -20, -137.4);
    glEnd();
}

//jarum detik
void jarumdetik()
{
    glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);
    glVertex3f(0, -11, -137.2);
    glVertex3f(0.3, -20, -137.2);
    glVertex3f(-0.3, -20, -137.2);
    glEnd();
}

void jam() {
    glPushMatrix();

    //kotak
    glColor3f(0.0, 0.0, 0.0);
    db(-9.5, 9.5, -29.5, -9.5, -137.48);        //depan
    db(-9.5, 9.5, -29.5, -9.5, -139.9);        //belakang
    kk(-9.5, -29.5, -9.5, -137.48, -139.9);     //kiri
    kk(9.5, -29.5, -9.5, -137.48, -139.9);     //kanan
    ab(-9.5, 9.5, -9.5, -137.48, -139.9);       //atas
    ab(-9.5, 9.5, -29.5, -137.48, -139.9);       //bawah

    //badan jam
    glColor3f(0.8, 0.8, 0.8);
    lingkaran(9, 50, 0, -20, -137.5);
    glPopMatrix();

    //jarum menit
    glPushMatrix();
    glRotatef(angle / 60, 0, 0.2, 1.4);
    jarummenit();
    glPopMatrix();

    //jarum jam
    glPushMatrix();
    glRotatef(angle / 720, 0, 0.2, 1.4);
    jarumjam();
    glPopMatrix();

    //jarum detik
    glPushMatrix();
    glRotatef(angle, 0, 0.2, 1.4);
    jarumdetik();
    glPopMatrix();

    //pusat tengah
    lingkaran(1.5, 50, 0, -20, -137.51);

    glFlush();
}

void bangunan() {
    //alas
    glColor3f(0.55, 0.46, 0.37);
    ab(-250.0, 250.0, -165.1, 30.0, -350.0);

    //bangunan
    glColor3f(0.85, 0.76, 0.67);
    //depan
    db(-220.0, 220.0, -165.0, 150.0, -100.0);
    //belakang
    db(-220.0, 220.0, -165.0, 150.0, -190.0);

    glColor3f(0.85, 0.76, 0.67);
    //kiri
    kk(-220.0, -165.0, 150.0, -100.0, -190.0);
    //kanan
    kk(220.0, -165.0, 150.0, -100.0, -190.0);

    //atas
    //ab(-145.0, 50.0, -5.0, 0.0, -135.0);
    //bawah
    //ab(-180.0, 180.0, -165.0, -50.0, -190.0);
}

void bangunan_depan() {
    //BANGUNAN DEPAN
    glColor3f(1.0, 0.0, 0.0);
    ab(-90.0, 90.0, -15.0, 0.0, -100.0);
    ab(-80.0, 80.0, -35.0, 0.0, -100.0);

    //-atap-
    glColor3f(0.0, 0.0, 1.0);
    ab(-60.0, -20.0, 5.0, -10.0, -90.0);
    ab(20.0, 60.0, 5.0, -10.0, -90.0);

    db2(-61.0, -60.0, -19.0, -20.0, 2.0, 5.0, -10.0);
    db2(61.0, 60.0, 19.0, 20.0, 2.0, 5.0, -10.0);

    kk(-60.0, 2.0, 5.0, -10.0, -90.0);
    kk(60.0, 2.0, 5.0, -10.0, -90.0);

    kk2(-19.0, 0.0, 2.0, 37.0, -10.0, -90.0);
    kk2(19.0, 0.0, 2.0, 37.0, -10.0, -90.0);

    //-atap2-
    kk2(-20.0, 0.0, 5.0, 40.0, -10.0, -90.0);
    kk2(20.0, 0.0, 5.0, 40.0, -10.0, -90.0);

    glBegin(GL_QUADS);
    glVertex3f(-20.0, 5.0, -10.0);
    glVertex3f(0.0, 40.0, -10.0);
    glVertex3f(0.0, 37.0, -10.0);
    glVertex3f(-19.0, 2.0, -10.0);
    glEnd();

    glBegin(GL_QUADS);
    glVertex3f(20.0, 5.0, -10.0);
    glVertex3f(0.0, 40.0, -10.0);
    glVertex3f(0.0, 37.0, -10.0);
    glVertex3f(19.0, 2.0, -10.0);
    glEnd();

    //kaca
    glColor3f(0.5, 0.5, 0.5);
    db2(-52.0, -61.0, 52.0, 61.0, -10.0, 2.0, -13.0);
    s3(-20.0, 0.0, 20.0, 2.0, 37.0, -13.0);

    //--garis--
    glColor3f(1.0, 0.0, 1.0);
    db2(-52.0, -61.0, -51.0, -60.0, -10.0, 2.0, -12.8);
    db2(-52.0, -43.0, -51.0, -42.0, -10.0, 2.0, -12.8);

    db2(-34.0, -43.0, -33.0, -42.0, -10.0, 2.0, -12.8);
    db2(-34.0, -25.0, -33.0, -24.0, -10.0, 2.0, -12.8);




}

void komputer(float xkiri, float xkanan) {
    //KOMPUTER
    //--alas--
    //belakang
    glColor3f(1.0, 0.0, 0.0);
    db(xkiri + 5, xkanan - 5, -130.0, -129.0, -82.5);
    //depan
    db(xkiri + 5, xkanan - 5, -130.0, -129.0, -76.0);
    //atas
    ab(xkiri + 5, xkanan - 5, -129.0, -76.0, -82.5);
    //bawah
    ab(xkiri + 5, xkanan - 5, -130.0, -76.0, -82.5);
    //kiri
    kk(xkiri + 5, -130.0, -129.0, -76.0, -82.5);
    //kanan
    kk(xkanan - 5, -130.0, -129.0, -76.0, -82.5);
    //--layar--
    //belakang
    glColor3f(0.2, 0.2, 0.2);
    db(xkiri, xkanan, -127.0, -102.0, -80.0);
    //kiri
    kk(xkiri, -127.0, -102.0, -78.5, -80.0);
    //kanan
    kk(xkanan, -127.0, -102.0, -78.5, -80.0);
    //depankiri
    db(xkiri, xkiri + 1, -127.0, -102.0, -78.5);
    //depankanan
    db(xkanan - 1, xkanan, -127.0, -102.0, -78.5);
    //depanatas
    db(xkiri + 1, xkanan - 1, -103.0, -102.0, -78.5);
    //depanbawah
    db(xkiri + 1, xkanan - 1, -127.0, -126.0, -78.5);
    //depanatas2
    ab(xkiri + 1, xkanan - 1, -103.0, -78.5, -79.0);
    //depanbawah2
    ab(xkiri + 1, xkanan - 1, -126.0, -78.5, -79.0);
    //depankiri2
    kk(xkiri + 1, -126.0, -103.0, -78.5, -79.0);
    //depankanan2
    kk(xkanan - 1, -126.0, -103.0, -78.5, -79.0);
    //monitor
    glColor3f(0.0, 0.0, 0.0);
    db(xkiri + 1, xkanan - 1, -126.0, -103.0, -79.0);
    //--sandaran--
    //depan
    glColor3f(0.2, 0.2, 0.2);
    db(xkiri + 7.5, xkanan - 7.5, -129.0, -126.0, -79.0);
    //belakang
    db(xkiri + 7.5, xkanan - 7.5, -129.0, -126.0, -79.5);
    //kiri
    kk(xkiri + 7.5, -129.0, -126.0, -79.0, -79.5);
    //kanan
    kk(xkanan - 7.5, -129.0, -126.0, -79.0, -79.5);

    //KEYBOARD
    glColor3f(0.0, 0.0, 0.0);
    //depan
    db(xkiri, xkanan, -130.0, -128.0, -55.0);
    //belakang
    db(xkiri, xkanan, -130.0, -128.0, -70.0);
    //kiri
    kk(xkiri, -130.0, -128.0, -55.0, -70.0);
    //kanan
    kk(xkanan, -130.0, -128.0, -55.0, -70.0);
    //atas
    ab(xkiri, xkanan, -128.0, -55.0, -70.0);
    //bawah
    ab(xkiri, xkanan, -130.0, -55.0, -70.0);

    //CPU
    //belakang
    glColor3f(0.2, 0.2, 0.2);
    db(xkanan + 3, xkanan + 13, -130.0, -100.0, -82.0);
    //depan
    db(xkanan + 3, xkanan + 13, -130.0, -100.0, -62.0);
    //kiri
    kk(xkanan + 3, -130.0, -100.0, -62.0, -82.0);
    //kanan
    kk(xkanan + 13, -130.0, -100.0, -62.0, -82.0);
}

void isi() {
    //db(-165.0, 50.0, -165.0, -10.0, 0.0);
    //MEJA
    //bawah
    glColor3f(0.61, 0.41, 0.25);
    ab(-145.0, 10.0, -135.0, -50.0, -90.0);
    //depan
    glColor3f(0.0, 0.0, 0.0);
    db(-145.0, 10.0, -135.0, -130.0, -50.0);
    //belakang
    db(-145.0, 10.0, -135.0, -130.0, -90.0);
    //kiri
    kk(-145.0, -135.0, -130.0, -50.0, -90.0);
    //kanan
    kk(10.0, -135.0, -130.0, -50.0, -90.0);
    //atas
    glColor3f(0.61, 0.41, 0.25);
    ab(-145.0, 10.0, -130.0, -50.0, -90.0);

    //KAKI MEJA
    //--kiri depan--
    //depan
    db(-145.0, -142.0, -165.0, -135.0, -50.0);
    //belakang
    db(-145.0, -142.0, -165.0, -135.0, -53.0);
    //kiri
    kk(-145.0, -165.0, -135.0, -50.0, -53.0);
    //kanan
    kk(-142.0, -165.0, -135.0, -50.0, -53.0);
    //--kiri belakang--
    //depan
    db(-145.0, -142.0, -165.0, -135.0, -90.0);
    //belakang
    db(-145.0, -142.0, -165.0, -135.0, -87.0);
    //kiri
    kk(-145.0, -165.0, -135.0, -90.0, -87.0);
    //kanan
    kk(-142.0, -165.0, -135.0, -90.0, -87.0);
    //--kanan depan--
    //depan
    db(7.0, 10.0, -165.0, -135.0, -50.0);
    //belakang
    db(7.0, 10.0, -165.0, -135.0, -53.0);
    //kiri
    kk(7.0, -165.0, -135.0, -50.0, -53.0);
    //kanan
    kk(10.0, -165.0, -135.0, -50.0, -53.0);
    //--kanan belakang--
    //depan
    db(7.0, 10, -165.0, -135.0, -90.0);
    //belakang
    db(7.0, 10, -165.0, -135.0, -87.0);
    //kiri
    kk(7.0, -165.0, -135.0, -90.0, -87.0);
    //kanan
    kk(10.0, -165.0, -135.0, -90.0, -87.0);

    //PAPAN TULIS
    //--belakang--
    glColor3f(0.5, 0.5, 0.5);
    db(-145.0, 10.0, -130.0, -30.0, -139.995);
    //--depan--
    glColor3f(1.0, 1.0, 1.0);
    db(-142.0, 7.0, -127.0, -33.0, -139.5);
    //depankiri
    glColor3f(0.0, 0.0, 0.0);
    glBegin(GL_QUADS);
    glVertex3f(-145.0, -130.0, -139.0);
    glVertex3f(-145.0, -30.0, -139.0);
    glVertex3f(-142.0, -33.0, -139.5);
    glVertex3f(-142.0, -127.0, -139.5);
    glEnd();
    //depankanan
    glBegin(GL_QUADS);
    glVertex3f(10.0, -130.0, -139.0);
    glVertex3f(10.0, -30.0, -139.0);
    glVertex3f(7.0, -33.0, -139.5);
    glVertex3f(7.0, -127.0, -139.5);
    glEnd();
    //depanatas
    glBegin(GL_QUADS);
    glVertex3f(-142.0, -33.0, -139.0);
    glVertex3f(-145.0, -30.0, -139.0);
    glVertex3f(10.0, -30.0, -139.5);
    glVertex3f(7.0, -33.0, -139.5);
    glEnd();
    //depanbawah
    glBegin(GL_QUADS);
    glVertex3f(-142.0, -127.0, -139.0);
    glVertex3f(-145.0, -130.0, -139.0);
    glVertex3f(10.0, -130.0, -139.5);
    glVertex3f(7.0, -127.0, -139.5);
    glEnd();
    //--kiri--
    kk(-145.0, -130.0, -30.0, -139.995, -139.0);
    //--kanan--
    kk(10.0, -130.0, -30.0, -139.995, -139.0);
    //--tempat penghapus--
    glColor3f(0.0, 0.0, 0.0);
    ab(-125.0, -10.0, -128.5, -135.0, -139.0);

    //KOMPUTER
    komputer(-140.0, -120.0);
    komputer(-105.0, -85.0);
    komputer(-65.0, -45.0);
    komputer(-25.0, -5.0);
}

void mobil() {
    //perintah animasi
    glPushMatrix();
    glTranslatef(gerak, 0, 0);

    //tengah
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(23.5, -155.0, 55.0);
    glVertex3f(23.5, -145.5, 55.0);
    glVertex3f(70.0, -145.5, 55.0);
    glVertex3f(70.0, -155.0, 55.0);
    glEnd();
    //tengah atas
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(28.5, -145.5, 55.0);
    glVertex3f(31.5, -130.5, 55.0);
    glVertex3f(67.0, -130.5, 55.0);
    glVertex3f(70.0, -145.5, 55.0);
    glEnd();
    //depan
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(70.0, -155.0, 55.0);
    glVertex3f(70.0, -145.5, 55.0);
    glVertex3f(81.0, -145.5, 55.0);
    glVertex3f(81.0, -155.0, 55.0);
    glEnd();

    //tengah
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(23.5, -155.0, 35.0);
    glVertex3f(23.5, -145.5, 35.0);
    glVertex3f(70.0, -145.5, 35.0);
    glVertex3f(70.0, -155.0, 35.0);
    glEnd();
    //tengah atas
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(28.5, -145.5, 35.0);
    glVertex3f(31.5, -130.5, 35.0);
    glVertex3f(67.0, -130.5, 35.0);
    glVertex3f(70.0, -145.5, 35.0);
    glEnd();
    //depan
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(70.0, -155.0, 35.0);
    glVertex3f(70.0, -145.5, 35.0);
    glVertex3f(81.0, -145.5, 35.0);
    glVertex3f(81.0, -155.0, 35.0);
    glEnd();

    //atas
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(31, -130.5, 35.0);
    glVertex3f(67, -130.5, 35.0); //belakang
    glVertex3f(67, -130.5, 55.0); //depan kanan
    glVertex3f(31, -130.5, 55.0); //depan kiri
    glEnd();
    //depan
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(67.0, -130.0, 55.0);
    glVertex3f(70.0, -145.0, 55.0);
    glVertex3f(70.0, -145.0, 35.0);
    glVertex3f(67.0, -130.0, 35.0);
    glEnd();
    //kaca-depan
    glBegin(GL_QUADS);
    glColor3f(0, 0, 0);
    glVertex3f(67.1, -130.0, 53.0);
    glVertex3f(70.1, -145.0, 53.0);
    glVertex3f(70.1, -145.0, 38.0);
    glVertex3f(67.1, -130.0, 38.0);
    glEnd();
    //belakang
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(31.0, -130.0, 55.0);
    glVertex3f(28.0, -145.0, 55.0);
    glVertex3f(28.0, -145.0, 35.0);
    glVertex3f(31.0, -130.0, 35.0);
    glEnd();
    //tutup cap depan
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(67, -145.5, 55.0);
    glVertex3f(80, -145.5, 55.0); //belakang
    glVertex3f(80, -145.5, 35.0); //depan kanan
    glVertex3f(67, -145.5, 35.0); //depan kiri
    glEnd();
    //tutup cap belakang
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(23, -145.5, 55.0);
    glVertex3f(28, -145.5, 55.0); //belakang
    glVertex3f(28, -145.5, 35.0); //depan kanan
    glVertex3f(23, -145.5, 35.0); //depan kiri
    glEnd();
    //tempat lampu
    //depan
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(81.0, -145.0, 55.0);
    glVertex3f(81.0, -155.0, 55.0);
    glVertex3f(81.0, -155.0, 35.0);
    glVertex3f(81.0, -145.0, 35.0);
    glEnd();
    //belakang
    glBegin(GL_QUADS);
    glColor3f(0, 0, 1);
    glVertex3f(23.0, -145.0, 55.0);
    glVertex3f(23.0, -155.0, 55.0);
    glVertex3f(23.0, -155.0, 35.0);
    glVertex3f(23.0, -145.0, 35.0);
    glEnd();
    //jendela 1
    glBegin(GL_QUADS);
    glColor3f(0, 0, 0);
    glVertex3f(50.5, -145.5, 55.1);
    glVertex3f(50.5, -130.5, 55.1);
    glVertex3f(62.0, -130.5, 55.1);
    glVertex3f(66.0, -145.5, 55.1);
    glEnd();
    //jendela 1
    glBegin(GL_QUADS);
    glColor3f(0, 0, 0);
    glVertex3f(50.5, -145.5, 35.1);
    glVertex3f(50.5, -130.5, 35.1);
    glVertex3f(62.0, -130.5, 35.1);
    glVertex3f(66.0, -145.5, 35.1);
    glEnd();

    //jendela 1
    glBegin(GL_QUADS);
    glColor3f(0, 0, 0);
    glVertex3f(32.0, -145.5, 55.1);
    glVertex3f(34.0, -130.5, 55.1);
    glVertex3f(48.5, -130.5, 55.1);
    glVertex3f(48.5, -145.5, 55.1);
    glEnd();
    //jendela 1
    glBegin(GL_QUADS);
    glColor3f(0, 0, 0);
    glVertex3f(32.0, -145.5, 35.1);
    glVertex3f(34.0, -130.5, 35.1);
    glVertex3f(48.5, -130.5, 35.1);
    glVertex3f(48.5, -145.5, 35.1);
    glEnd();

    //ban depan1
    glColor3f(1, 1, 0);
    glBegin(GL_POLYGON);

    radius = 400;
    jumlah_titik = 60;
    x_tengah = 3500;
    y_tengah = -15500;

    for (i = 0; i <= 360; i++)
    {
        float sudut = i * (2 * PI / jumlah_titik);
        float x = x_tengah + radius * cos(sudut);
        float y = y_tengah + radius * sin(sudut);
        glVertex3f(x / 100, y / 100, 55.1);
    }
    glEnd();
    glFlush();

    //ban depan2
    glColor3f(1, 1, 0);
    glBegin(GL_POLYGON);

    radius = 400;
    jumlah_titik = 60;
    x_tengah = 6700;
    y_tengah = -15500;

    for (i = 0; i <= 360; i++)
    {
        float sudut = i * (2 * PI / jumlah_titik);
        float x = x_tengah + radius * cos(sudut);
        float y = y_tengah + radius * sin(sudut);
        glVertex3f(x / 100, y / 100, 55.1);
    }
    glEnd();
    glFlush();

    //ban belakang1
    glColor3f(1, 1, 0);
    glBegin(GL_POLYGON);

    radius = 400;
    jumlah_titik = 60;
    x_tengah = 3500;
    y_tengah = -15500;

    for (i = 0; i <= 360; i++)
    {
        float sudut = i * (2 * PI / jumlah_titik);
        float x = x_tengah + radius * cos(sudut);
        float y = y_tengah + radius * sin(sudut);
        glVertex3f(x / 100, y / 100, 34.9);
    }
    glEnd();
    glFlush();

    //ban belakang2
    glColor3f(1, 1, 0);
    glBegin(GL_POLYGON);

    radius = 400;
    jumlah_titik = 60;
    x_tengah = 6700;
    y_tengah = -15500;

    for (i = 0; i <= 360; i++)
    {
        float sudut = i * (2 * PI / jumlah_titik);
        float x = x_tengah + radius * cos(sudut);
        float y = y_tengah + radius * sin(sudut);
        glVertex3f(x / 100, y / 100, 34.9);
    }
    glEnd();
    glFlush();
    glPopMatrix();


}

void timer2(int t) {
    angle -= 6.3;
    glutPostRedisplay();

    glutTimerFunc(1000, timer2, 0);
}

void timer(int t)
{
    if (atas) {
        gerak += 1;
    }
    else {
        gerak -= 1;
    }
    if (gerak > 100) {
        atas = false;
    }
    else if (gerak < -200) {
        atas = true;
    }
    glutPostRedisplay();

    /*
    kecepatan mobil berbanding terbalik
    semakin besar nilai glutTimerFunc maka akan semakin pelan gerakannya
    note: angka 50
    */
    glutTimerFunc(50, timer, 0);
}

void jalan() {
    glColor3f(0.0, 0.0, 0.0);
    ab(-200.0, 200.0, -160.0, 57, 32);

    //garis
    glColor3f(1.0, 1.0, 1.0);
    ab(-180.0, -150.0, -159.9, 46.0, 43.0);
    ab(-120.0, -90.0, -159.9, 46.0, 43.0);
    ab(-60.0, -30.0, -159.9, 46.0, 43.0);
    ab(0.0, 30.0, -159.9, 46.0, 43.0);
    ab(60.0, 90.0, -159.9, 46.0, 43.0);
    ab(120.0, 150.0, -159.9, 46.0, 43.0);
    ab(180.0, 200.0, -159.9, 46.0, 43.0);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glRotatef(xrot, 0.0f, 1.0f, 0.0f);
    glRotatef(yrot, 1.0f, 0.0f, 0.0f);

    glTranslatef(xmov, ymov, zmov);
    tampil();
    glFlush();
    glutSwapBuffers();
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1000, 600);
    glutInitWindowPosition(250, 80);
    glutCreateWindow("Pasar Raya II Salatiga");
    init();
    glutDisplayFunc(tampil);
    glutTimerFunc(1, timer, 0);
    glutTimerFunc(1, timer2, 0);
    glutKeyboardFunc(keyboard);
    glutReshapeFunc(ukuran);
    glutMouseFunc(mouse);
    glutMotionFunc(mouseMotion);
    glutIdleFunc(display);
    glutMainLoop();
    return 0;
}

void init(void)
{
    glClearColor(0.53, 0.8, 0.98, 0.0);
    glMatrixMode(GL_PROJECTION);
    glEnable(GL_LIGHTING);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST);
    is_depth = 1;
    glMatrixMode(GL_MODELVIEW);
    //glOrtho(-100.0, 100.0, -100.0, 100.0, -0.0, 5.0);
    glPointSize(9.0);
    glLineWidth(6.0f);
}

void tampil(void)
{
    if (is_depth)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    else
        glClear(GL_COLOR_BUFFER_BIT);

    bangunan();
    bangunan_depan();
    //isi();
    jalan();
    mobil();
    //jam();

    glutSwapBuffers();

}

void idle()
{
    if (!mouseDown)
    {
        xrot += 0.3f;
        yrot += 0.4f;
    }
}

void mouse(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        mouseDown = true;
        xdiff = x - yrot;
        ydiff = -y + xrot;
    }
    else
        mouseDown = false;
}

void mouseMotion(int x, int y) {
    if (mouseDown) {
        xrot = x - xdiff;
        yrot = y + ydiff;

        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 'w':
    case 'W':
        zmov += 10;
        break;
    case 'd':
    case 'D':
        xmov += 10;
        break;
    case 's':
    case 'S':
        zmov -= 10;
        break;
    case 'a':
    case 'A':
        xmov -= 10;
        break;
    case '7':
        ymov += 10;
        break;
    case '9':
        ymov -= 10;
        break;
    case '2':
        xrot += 10;
        break;
    case '8':
        xrot -= 10;
        break;
    case '6':
        yrot += 10;
        break;
    case '4':
        yrot -= 10;
        break;
    case '1':
        zrot += 10;
        break;
    case '3':
        zrot -= 10;
        break;
    case '5':
        if (is_depth)
        {
            is_depth = 0;
            glDisable(GL_DEPTH_TEST);
        }
        else
        {
            is_depth = 1;
            glEnable(GL_DEPTH_TEST);
        }
    }
    glutPostRedisplay();
}

void ukuran(int lebar, int tinggi)
{
    if (tinggi == 0) tinggi = 1;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(90.0, lebar / tinggi, 5.0, 5000.0);
    glViewport(0, 0, 1000, 600);
    glTranslatef(0.0, 0.0, -220.0);
    glMatrixMode(GL_MODELVIEW);
}
